{{- range $key, $value := .Values.apps }}
{{- $appName := include "app.name" (dict "app" .appName "cluster" $.Values.clusterID "ns" $.Release.Namespace) }}
{{- if .enabled }}
---
apiVersion: application.giantswarm.io/v1alpha1
kind: App
metadata:
  {{- if .dependsOn }}
  annotations:
    {{- if hasPrefix "org-" $.Release.Namespace }}
    # App is deployed in the org- namespace so the secret name is prefixed by the cluster-id
    app-operator.giantswarm.io/depends-on: {{ printf "%s-%s" $.Values.clusterID .dependsOn -}}
    {{- else }}
    # App is deployed in the cluster-id namespace so prefix is unneeded
    app-operator.giantswarm.io/depends-on: {{ .dependsOn -}}
    {{- end }}
  {{- end }}
  labels:
    {{- include "labels.common" $ | nindent 4 }}
  name: {{ $appName }}
  namespace: {{ $.Release.Namespace }}
spec:
  catalog: {{ .catalog }}
  {{- with .options }}
  {{- if .install }}
  install:
    timeout: {{ .install.timeout }}
  {{- end }}
  {{- if .upgrade }}
  upgrade:
    timeout: {{ .upgrade.timeout }}
  {{- end }}
  {{- if .rollback }}
  rollback:
    timeout: {{ .rollback.timeout }}
  {{- end }}
  {{- if .uninstall }}
  uninstall:
    timeout: {{ .uninstall.timeout }}
  {{- end }}
  {{- end }}
  config:
    configMap:
      name: {{ $.Values.clusterID }}-cluster-values
      namespace: {{ $.Release.Namespace }}
  kubeConfig:
    context:
      name: {{ $.Values.clusterID }}-admin@{{ $.Values.clusterID }}
    inCluster: false
    secret:
      name: {{ $.Values.clusterID }}-kubeconfig
      namespace: {{ $.Release.Namespace}}
  name: {{ .chartName }}
  namespace: {{ required "A valid .Values.global.namespace or .Values.apps.{APP_NAME}.namespace entry is required" (default ($.Values.global).namespace .namespace) }}
  version: {{ .version }}
  {{- if $.Values.userConfig }}
  {{- with (get $.Values.userConfig $key) }}
  {{- if or .configMap .secret }}
  userConfig:
  {{- if .configMap }}
    configMap:
      name: {{ $appName }}-user-values
      namespace: {{ $.Release.Namespace }}
  {{- end }}
  {{- if .secret }}
    secret:
      name: {{ $appName }}-user-secrets
      namespace: {{ $.Release.Namespace }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- end }}
{{- end }}
{{- if $.Values.userConfig }}
{{- with (get $.Values.userConfig $key) }}
{{- if ((.configMap).values) }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "labels.common" $ | nindent 4 }}
  name: {{ $appName }}-user-values
  namespace: {{ $.Release.Namespace }}
data:
  values: |
  {{- (tpl (.configMap.values | toYaml | toString) $) | nindent 4 }}
{{- end }}
{{- if ((.secret).values) }}
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    {{- include "labels.common" $ | nindent 4 }}
  name: {{ $appName }}-user-secrets
  namespace: {{ $.Release.Namespace }}
stringData:
  values: |
  {{- (tpl (.secret.values | toYaml | toString) $) | nindent 4 }}
{{- end }}
{{- end }}
{{- end }}
{{- end -}}
